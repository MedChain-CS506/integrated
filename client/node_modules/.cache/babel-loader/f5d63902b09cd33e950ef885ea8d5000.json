{"ast":null,"code":"import firebase, { auth, firestore } from '../firebase';\nconst authentication = {};\n\nauthentication.signUp = fields => new Promise((resolve, reject) => {\n  if (!fields) {\n    reject();\n    return;\n  }\n\n  const firstName = fields.firstName;\n  const lastName = fields.lastName;\n  const email = fields.email;\n  const password = fields.password;\n\n  if (!firstName || !lastName || !email || !password) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n  console.log('currentUser:', currentUser); // IF THERE IS A CURRENT USER, DON'T SIGN THEM UP\n\n  if (currentUser) {\n    reject();\n    return;\n  }\n\n  auth.createUserWithEmailAndPassword(email, password).then(value => {\n    const user = value.user;\n\n    if (!user) {\n      reject();\n      return;\n    }\n\n    const uid = user.uid;\n\n    if (!uid) {\n      reject();\n      return;\n    } // STORE THEM IN THE FIREBASE\n\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.set({\n      firstName,\n      lastName\n    }).then(val => {\n      resolve(val);\n    }).catch(reason => {\n      reject(reason);\n    });\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.signIn = (email, password) => new Promise((resolve, reject) => {\n  if (!email || !password) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n\n  if (currentUser) {\n    reject();\n    return;\n  }\n\n  auth.signInWithEmailAndPassword(email, password).then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.signOut = () => new Promise((resolve, reject) => {\n  const currentUser = auth.currentUser;\n\n  if (!currentUser) {\n    reject();\n    return;\n  }\n\n  auth.signOut().then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.resetPassword = email => new Promise((resolve, reject) => {\n  if (!email) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n\n  if (currentUser) {\n    reject();\n    return;\n  }\n\n  auth.sendPasswordResetEmail(email).then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.changeFirstName = firstName => new Promise((resolve, reject) => {\n  if (!firstName) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n\n  if (!currentUser) {\n    reject();\n    return;\n  }\n\n  const uid = currentUser.uid;\n\n  if (!uid) {\n    reject();\n    return;\n  }\n\n  const reference = firestore.collection('users').doc(uid);\n\n  if (!reference) {\n    reject();\n    return;\n  }\n\n  reference.update({\n    firstName\n  }).then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.changeLastName = lastName => new Promise((resolve, reject) => {\n  if (!lastName) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n\n  if (!currentUser) {\n    reject();\n    return;\n  }\n\n  const uid = currentUser.uid;\n\n  if (!uid) {\n    reject();\n    return;\n  }\n\n  const reference = firestore.collection('users').doc(uid);\n\n  if (!reference) {\n    reject();\n    return;\n  }\n\n  reference.update({\n    lastName\n  }).then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.changeEmail = email => new Promise((resolve, reject) => {\n  if (!email) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n\n  if (!currentUser) {\n    reject();\n    return;\n  }\n\n  const uid = currentUser.uid;\n\n  if (!uid) {\n    reject();\n    return;\n  }\n\n  currentUser.updateEmail(email).then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.changePassword = password => new Promise((resolve, reject) => {\n  if (!password) {\n    reject();\n    return;\n  }\n\n  const currentUser = auth.currentUser;\n\n  if (!currentUser) {\n    reject();\n    return;\n  }\n\n  const uid = currentUser.uid;\n\n  if (!uid) {\n    reject();\n    return;\n  }\n\n  currentUser.updatePassword(password).then(() => {\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n      return;\n    }\n\n    reference.update({\n      lastPasswordChange: firebase.firestore.FieldValue.serverTimestamp() // eslint-disable-line\n\n    }).then(value => {\n      resolve(value);\n    }).catch(reason => {\n      reject(reason);\n    });\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nauthentication.deleteAccount = () => new Promise((resolve, reject) => {\n  const currentUser = auth.currentUser;\n\n  if (!currentUser) {\n    reject();\n    return;\n  }\n\n  currentUser.delete().then(value => {\n    resolve(value);\n  }).catch(reason => {\n    reject(reason);\n  });\n});\n\nexport default authentication;","map":{"version":3,"sources":["/home/n3m0/Documents/integrated/client/src/utils/authentication.js"],"names":["firebase","auth","firestore","authentication","signUp","fields","Promise","resolve","reject","firstName","lastName","email","password","currentUser","console","log","createUserWithEmailAndPassword","then","value","user","uid","reference","collection","doc","set","val","catch","reason","signIn","signInWithEmailAndPassword","signOut","resetPassword","sendPasswordResetEmail","changeFirstName","update","changeLastName","changeEmail","updateEmail","changePassword","updatePassword","lastPasswordChange","FieldValue","serverTimestamp","deleteAccount","delete"],"mappings":"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","sourcesContent":["import firebase, { auth, firestore } from '../firebase';\n\nconst authentication = {};\n\nauthentication.signUp = fields =>\n  new Promise((resolve, reject) => {\n    if (!fields) {\n      reject();\n      return;\n    }\n\n    const { firstName } = fields;\n    const { lastName } = fields;\n    const { email } = fields;\n    const { password } = fields;\n\n    if (!firstName || !lastName || !email || !password) {\n      reject();\n      return;\n    }\n\n    const { currentUser } = auth;\n    console.log('currentUser:', currentUser);\n\n    // IF THERE IS A CURRENT USER, DON'T SIGN THEM UP\n    if (currentUser) {\n      reject();\n      return;\n    }\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then(value => {\n        const { user } = value;\n\n        if (!user) {\n          reject();\n          return;\n        }\n\n        const { uid } = user;\n\n        if (!uid) {\n          reject();\n          return;\n        }\n\n        // STORE THEM IN THE FIREBASE\n        const reference = firestore.collection('users').doc(uid);\n\n        if (!reference) {\n          reject();\n          return;\n        }\n\n        reference\n          .set({\n            firstName,\n            lastName,\n          })\n          .then(val => {\n            resolve(val);\n          })\n          .catch(reason => {\n            reject(reason);\n          });\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.signIn = (email, password) =>\n  new Promise((resolve, reject) => {\n    if (!email || !password) {\n      reject();\n      return;\n    }\n\n    const { currentUser } = auth;\n\n    if (currentUser) {\n      reject();\n      return;\n    }\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.signOut = () =>\n  new Promise((resolve, reject) => {\n    const { currentUser } = auth;\n\n    if (!currentUser) {\n      reject();\n      return;\n    }\n\n    auth\n      .signOut()\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.resetPassword = email =>\n  new Promise((resolve, reject) => {\n    if (!email) {\n      reject();\n\n      return;\n    }\n\n    const { currentUser } = auth;\n\n    if (currentUser) {\n      reject();\n\n      return;\n    }\n\n    auth\n      .sendPasswordResetEmail(email)\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.changeFirstName = firstName =>\n  new Promise((resolve, reject) => {\n    if (!firstName) {\n      reject();\n\n      return;\n    }\n\n    const { currentUser } = auth;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const { uid } = currentUser;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference\n      .update({\n        firstName,\n      })\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.changeLastName = lastName =>\n  new Promise((resolve, reject) => {\n    if (!lastName) {\n      reject();\n\n      return;\n    }\n\n    const { currentUser } = auth;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const { uid } = currentUser;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    const reference = firestore.collection('users').doc(uid);\n\n    if (!reference) {\n      reject();\n\n      return;\n    }\n\n    reference\n      .update({\n        lastName,\n      })\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.changeEmail = email =>\n  new Promise((resolve, reject) => {\n    if (!email) {\n      reject();\n\n      return;\n    }\n\n    const { currentUser } = auth;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const { uid } = currentUser;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    currentUser\n      .updateEmail(email)\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.changePassword = password =>\n  new Promise((resolve, reject) => {\n    if (!password) {\n      reject();\n\n      return;\n    }\n\n    const { currentUser } = auth;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    const { uid } = currentUser;\n\n    if (!uid) {\n      reject();\n\n      return;\n    }\n\n    currentUser\n      .updatePassword(password)\n      .then(() => {\n        const reference = firestore.collection('users').doc(uid);\n\n        if (!reference) {\n          reject();\n\n          return;\n        }\n\n        reference\n          .update({\n            lastPasswordChange: firebase.firestore.FieldValue.serverTimestamp(), // eslint-disable-line\n          })\n          .then(value => {\n            resolve(value);\n          })\n          .catch(reason => {\n            reject(reason);\n          });\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nauthentication.deleteAccount = () =>\n  new Promise((resolve, reject) => {\n    const { currentUser } = auth;\n\n    if (!currentUser) {\n      reject();\n\n      return;\n    }\n\n    currentUser\n      .delete()\n      .then(value => {\n        resolve(value);\n      })\n      .catch(reason => {\n        reject(reason);\n      });\n  });\n\nexport default authentication;\n"]},"metadata":{},"sourceType":"module"}