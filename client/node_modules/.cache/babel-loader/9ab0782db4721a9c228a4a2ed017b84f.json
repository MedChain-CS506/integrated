{"ast":null,"code":"import _slicedToArray from \"/home/n3m0/Documents/integrated/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/n3m0/Documents/integrated/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/n3m0/Documents/integrated/client/src/components/Dialog/SignUpDialog/SignUpDialog.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; //* MUI\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport validate from 'validate.js';\nimport constraints from '../../../utils/constraints';\nimport authentication from '../../../utils/authentication';\nconst useStyles = makeStyles({\n  dialogContent: {\n    overflowY: 'hidden'\n  }\n});\n\nconst SignUpDialog = (_ref) => {\n  let dialogProps = _ref.dialogProps,\n      props = _objectWithoutProperties(_ref, [\"dialogProps\"]);\n\n  const classes = useStyles();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        performingAction = _useState2[0],\n        setPerformingAction = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstName = _useState4[0],\n        setFirstName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        lastName = _useState6[0],\n        setLastName = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        email = _useState8[0],\n        setEmail = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        password = _useState10[0],\n        setPassword = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        passwordConfirmation = _useState12[0],\n        setPasswordConfirmation = _useState12[1];\n\n  const _useState13 = useState(null),\n        _useState14 = _slicedToArray(_useState13, 2),\n        errors = _useState14[0],\n        setErrors = _useState14[1]; // TODO: FIX THIS... MAKE THIS THE MODULAR VARIABLE FOR ERROR HANDLING...\n\n\n  const signUp = () => {\n    const signUpErrors = validate({\n      firstName,\n      lastName,\n      email,\n      password,\n      passwordConfirmation\n    }, {\n      firstName: constraints.firstName,\n      lastName: constraints.lastName,\n      email: constraints.email,\n      password: constraints.password,\n      passwordConfirmation: constraints.passwordConfirmation\n    });\n\n    if (signUpErrors) {\n      setErrors(signUpErrors);\n    } else {\n      setPerformingAction(true);\n      setErrors(null);\n      authentication.signUp({\n        firstName,\n        lastName,\n        email,\n        password\n      }).then(() => {\n        dialogProps.onClose();\n      }).catch(reason => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/email-already-in-use':\n          case 'auth/invalid-email':\n          case 'auth/operation-not-allowed':\n          case 'auth/weak-password':\n            props.openSnackbar(message);\n            return;\n\n          default:\n            props.openSnackbar(message);\n        }\n      }).finally(() => setPerformingAction(false));\n    }\n  };\n\n  const handleKeyPress = event => {\n    if (!firstName || !lastName || !email || !password || !passwordConfirmation) return;\n    const key = event.key;\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) return;\n    if (key === 'Enter') signUp();\n  };\n\n  const handleExited = () => {\n    setFirstName('');\n    setLastName('');\n    setEmail('');\n    setPassword('');\n    setPasswordConfirmation('');\n  };\n\n  return React.createElement(Dialog, Object.assign({\n    fullWidth: true,\n    maxWidth: \"md\"\n  }, dialogProps, {\n    onKeyPress: handleKeyPress,\n    onExited: handleExited,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Sign up for an account\"), React.createElement(Hidden, {\n    smDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    className: classes.dialogContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"given-name\",\n    disabled: performingAction // error={!!(errors && errors.firstName)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.firstName ? errors.firstName[0] : ''\n    // }\n    ,\n    label: \"First name\",\n    placeholder: \"John\",\n    required: true,\n    type: \"text\",\n    value: firstName,\n    variant: \"outlined\",\n    onChange: e => setFirstName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"family-name\",\n    disabled: performingAction // error={!!(errors && errors.lastName)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.lastName ? errors.lastName[0] : ''\n    // }\n    ,\n    label: \"Last name\",\n    placeholder: \"Doe\",\n    required: true,\n    type: \"text\",\n    value: lastName,\n    variant: \"outlined\",\n    onChange: e => setLastName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"email\",\n    disabled: performingAction // error={!!(errors && errors.email)}\n    ,\n    fullWidth: true // helperText={errors && errors.email ? errors.email[0] : ''}\n    ,\n    label: \"E-mail address\",\n    placeholder: \"john@doe.com\",\n    required: true,\n    type: \"email\",\n    value: email,\n    variant: \"outlined\",\n    onChange: e => setEmail(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"new-password\",\n    disabled: performingAction // error={!!(errors && errors.password)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.password ? errors.password[0] : ''\n    // }\n    ,\n    label: \"Password\",\n    placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    required: true,\n    type: \"password\",\n    value: password,\n    variant: \"outlined\",\n    onChange: e => setPassword(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"password\",\n    disabled: performingAction // error={!!(errors && errors.passwordConfirmation)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.passwordConfirmation\n    //     ? errors.passwordConfirmation[0]\n    //     : ''\n    // }\n    ,\n    label: \"Password confirmation\",\n    placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    required: true,\n    type: \"password\",\n    value: passwordConfirmation,\n    variant: \"outlined\",\n    onChange: e => setPasswordConfirmation(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }))))))), React.createElement(Hidden, {\n    mdUp: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"given-name\",\n    disabled: performingAction // error={!!(errors && errors.firstName)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.firstName ? errors.firstName[0] : ''\n    // }\n    ,\n    label: \"First name\",\n    placeholder: \"John\",\n    required: true,\n    type: \"text\",\n    value: firstName,\n    variant: \"outlined\",\n    onChange: e => setFirstName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"family-name\",\n    disabled: performingAction // error={!!(errors && errors.lastName)}\n    ,\n    fullWidth: true // helperText={errors && errors.lastName ? errors.lastName[0] : ''}\n    ,\n    label: \"Last name\",\n    placeholder: \"Doe\",\n    required: true,\n    type: \"text\",\n    value: lastName,\n    variant: \"outlined\",\n    onChange: e => setLastName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"email\",\n    disabled: performingAction // error={!!(errors && errors.email)}\n    ,\n    fullWidth: true // helperText={errors && errors.email ? errors.email[0] : ''}\n    ,\n    label: \"E-mail address\",\n    placeholder: \"john@doe.com\",\n    required: true,\n    type: \"email\",\n    value: email,\n    variant: \"outlined\",\n    onChange: e => setEmail(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"new-password\",\n    disabled: performingAction // error={!!(errors && errors.password)}\n    ,\n    fullWidth: true // helperText={errors && errors.password ? errors.password[0] : ''}\n    ,\n    label: \"Password\",\n    placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    required: true,\n    type: \"password\",\n    value: password,\n    variant: \"outlined\",\n    onChange: e => setPassword(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"password\",\n    disabled: performingAction // error={!!(errors && errors.passwordConfirmation)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.passwordConfirmation\n    //     ? errors.passwordConfirmation[0]\n    //     : ''\n    // }\n    ,\n    label: \"Password confirmation\",\n    placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    required: true,\n    type: \"password\",\n    value: passwordConfirmation,\n    variant: \"outlined\",\n    onChange: e => setPasswordConfirmation(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: dialogProps.onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    name: \"signUp\",\n    color: \"primary\",\n    disabled: !firstName || !lastName || !email || !password || !passwordConfirmation || performingAction,\n    variant: \"contained\",\n    onClick: signUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, \"Sign Up\")));\n};\n\nSignUpDialog.propTypes = {\n  dialogProps: PropTypes.object.isRequired,\n  openSnackbar: PropTypes.func.isRequired\n};\nexport default SignUpDialog;","map":{"version":3,"sources":["/home/n3m0/Documents/integrated/client/src/components/Dialog/SignUpDialog/SignUpDialog.js"],"names":["React","useState","PropTypes","makeStyles","Dialog","DialogTitle","DialogContent","DialogActions","Hidden","Grid","Button","TextField","validate","constraints","authentication","useStyles","dialogContent","overflowY","SignUpDialog","dialogProps","props","classes","performingAction","setPerformingAction","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","errors","setErrors","signUp","signUpErrors","then","onClose","catch","reason","code","message","openSnackbar","finally","handleKeyPress","event","key","altKey","ctrlKey","metaKey","shiftKey","handleExited","e","target","value","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\n//* MUI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport validate from 'validate.js';\nimport constraints from '../../../utils/constraints';\nimport authentication from '../../../utils/authentication';\n\nconst useStyles = makeStyles({\n  dialogContent: {\n    overflowY: 'hidden',\n  },\n});\n\nconst SignUpDialog = ({ dialogProps, ...props }) => {\n  const classes = useStyles();\n\n  const [performingAction, setPerformingAction] = useState(false);\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [errors, setErrors] = useState(null); // TODO: FIX THIS... MAKE THIS THE MODULAR VARIABLE FOR ERROR HANDLING...\n\n  const signUp = () => {\n    const signUpErrors = validate(\n      {\n        firstName,\n        lastName,\n        email,\n        password,\n        passwordConfirmation,\n      },\n      {\n        firstName: constraints.firstName,\n        lastName: constraints.lastName,\n        email: constraints.email,\n        password: constraints.password,\n        passwordConfirmation: constraints.passwordConfirmation,\n      }\n    );\n\n    if (signUpErrors) {\n      setErrors(signUpErrors);\n    } else {\n      setPerformingAction(true);\n      setErrors(null);\n      authentication\n        .signUp({\n          firstName,\n          lastName,\n          email,\n          password,\n        })\n        .then(() => {\n          dialogProps.onClose();\n        })\n        .catch(reason => {\n          const { code } = reason;\n          const { message } = reason;\n\n          switch (code) {\n            case 'auth/email-already-in-use':\n            case 'auth/invalid-email':\n            case 'auth/operation-not-allowed':\n            case 'auth/weak-password':\n              props.openSnackbar(message);\n              return;\n\n            default:\n              props.openSnackbar(message);\n          }\n        })\n        .finally(() => setPerformingAction(false));\n    }\n  };\n\n  const handleKeyPress = event => {\n    if (!firstName || !lastName || !email || !password || !passwordConfirmation)\n      return;\n    const { key } = event;\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey)\n      return;\n    if (key === 'Enter') signUp();\n  };\n\n  const handleExited = () => {\n    setFirstName('');\n    setLastName('');\n    setEmail('');\n    setPassword('');\n    setPasswordConfirmation('');\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"md\"\n      {...dialogProps}\n      onKeyPress={handleKeyPress}\n      onExited={handleExited}\n    >\n      <DialogTitle>Sign up for an account</DialogTitle>\n\n      <Hidden smDown>\n        <DialogContent className={classes.dialogContent}>\n          <Grid container direction=\"row\">\n            <Grid item xs={12}>\n              <Grid container spacing={4}>\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"given-name\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.firstName)}\n                    fullWidth\n                    // helperText={\n                    //   errors && errors.firstName ? errors.firstName[0] : ''\n                    // }\n                    label=\"First name\"\n                    placeholder=\"John\"\n                    required\n                    type=\"text\"\n                    value={firstName}\n                    variant=\"outlined\"\n                    onChange={e => setFirstName(e.target.value)}\n                  />\n                </Grid>\n\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"family-name\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.lastName)}\n                    fullWidth\n                    // helperText={\n                    //   errors && errors.lastName ? errors.lastName[0] : ''\n                    // }\n                    label=\"Last name\"\n                    placeholder=\"Doe\"\n                    required\n                    type=\"text\"\n                    value={lastName}\n                    variant=\"outlined\"\n                    onChange={e => setLastName(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={4}>\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"email\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.email)}\n                    fullWidth\n                    // helperText={errors && errors.email ? errors.email[0] : ''}\n                    label=\"E-mail address\"\n                    placeholder=\"john@doe.com\"\n                    required\n                    type=\"email\"\n                    value={email}\n                    variant=\"outlined\"\n                    onChange={e => setEmail(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={4}>\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"new-password\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.password)}\n                    fullWidth\n                    // helperText={\n                    //   errors && errors.password ? errors.password[0] : ''\n                    // }\n                    label=\"Password\"\n                    placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                    required\n                    type=\"password\"\n                    value={password}\n                    variant=\"outlined\"\n                    onChange={e => setPassword(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={4}>\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"password\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.passwordConfirmation)}\n                    fullWidth\n                    // helperText={\n                    //   errors && errors.passwordConfirmation\n                    //     ? errors.passwordConfirmation[0]\n                    //     : ''\n                    // }\n                    label=\"Password confirmation\"\n                    placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                    required\n                    type=\"password\"\n                    value={passwordConfirmation}\n                    variant=\"outlined\"\n                    onChange={e => setPasswordConfirmation(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Hidden>\n\n      <Hidden mdUp>\n        <DialogContent>\n          <Grid container direction=\"column\" spacing={2}>\n            <Grid item xs>\n              <TextField\n                autoComplete=\"given-name\"\n                disabled={performingAction}\n                // error={!!(errors && errors.firstName)}\n                fullWidth\n                // helperText={\n                //   errors && errors.firstName ? errors.firstName[0] : ''\n                // }\n                label=\"First name\"\n                placeholder=\"John\"\n                required\n                type=\"text\"\n                value={firstName}\n                variant=\"outlined\"\n                onChange={e => setFirstName(e.target.value)}\n              />\n            </Grid>\n\n            <Grid item xs>\n              <TextField\n                autoComplete=\"family-name\"\n                disabled={performingAction}\n                // error={!!(errors && errors.lastName)}\n                fullWidth\n                // helperText={errors && errors.lastName ? errors.lastName[0] : ''}\n                label=\"Last name\"\n                placeholder=\"Doe\"\n                required\n                type=\"text\"\n                value={lastName}\n                variant=\"outlined\"\n                onChange={e => setLastName(e.target.value)}\n              />\n            </Grid>\n\n            <Grid item xs>\n              <TextField\n                autoComplete=\"email\"\n                disabled={performingAction}\n                // error={!!(errors && errors.email)}\n                fullWidth\n                // helperText={errors && errors.email ? errors.email[0] : ''}\n                label=\"E-mail address\"\n                placeholder=\"john@doe.com\"\n                required\n                type=\"email\"\n                value={email}\n                variant=\"outlined\"\n                onChange={e => setEmail(e.target.value)}\n              />\n            </Grid>\n\n            <Grid item xs>\n              <TextField\n                autoComplete=\"new-password\"\n                disabled={performingAction}\n                // error={!!(errors && errors.password)}\n                fullWidth\n                // helperText={errors && errors.password ? errors.password[0] : ''}\n                label=\"Password\"\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                required\n                type=\"password\"\n                value={password}\n                variant=\"outlined\"\n                onChange={e => setPassword(e.target.value)}\n              />\n            </Grid>\n\n            <Grid item xs>\n              <TextField\n                autoComplete=\"password\"\n                disabled={performingAction}\n                // error={!!(errors && errors.passwordConfirmation)}\n                fullWidth\n                // helperText={\n                //   errors && errors.passwordConfirmation\n                //     ? errors.passwordConfirmation[0]\n                //     : ''\n                // }\n                label=\"Password confirmation\"\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                required\n                type=\"password\"\n                value={passwordConfirmation}\n                variant=\"outlined\"\n                onChange={e => setPasswordConfirmation(e.target.value)}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Hidden>\n\n      <DialogActions>\n        <Button color=\"primary\" onClick={dialogProps.onClose}>\n          Cancel\n        </Button>\n        <Button\n          name=\"signUp\"\n          color=\"primary\"\n          disabled={\n            !firstName ||\n            !lastName ||\n            !email ||\n            !password ||\n            !passwordConfirmation ||\n            performingAction\n          }\n          variant=\"contained\"\n          onClick={signUp}\n        >\n          Sign Up\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nSignUpDialog.propTypes = {\n  dialogProps: PropTypes.object.isRequired,\n  openSnackbar: PropTypes.func.isRequired,\n};\n\nexport default SignUpDialog;\n"]},"metadata":{},"sourceType":"module"}