{"ast":null,"code":"import _slicedToArray from \"/home/n3m0/Documents/integrated/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/n3m0/Documents/integrated/client/src/components/Dialog/SettingsDialog/tabs/SecurityTab/SecurityTab.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport validate from 'validate.js';\nimport moment from 'moment';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Hidden from '@material-ui/core/Hidden';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport LockIcon from '@material-ui/icons/Lock';\nimport EditIcon from '@material-ui/icons/Edit';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Divider from '@material-ui/core/Divider';\nimport constraints from '../../../../../utils/constraints';\nimport authentication from '../../../../../utils/authentication';\n\nconst SecurityTab = ({\n  user,\n  userData,\n  openSnackbar,\n  onDeleteAccountClick\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        showingField = _useState2[0],\n        setShowingField = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        passwordConfirmation = _useState6[0],\n        setPasswordConfirmation = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        performingAction = _useState8[0],\n        setPerformingAction = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        errors = _useState10[0],\n        setErrors = _useState10[1];\n\n  const showField = fieldId => {\n    if (!fieldId) {\n      return;\n    }\n\n    setShowingField(fieldId);\n  };\n\n  const hideFields = () => {\n    setShowingField('');\n    setPassword('');\n    setPasswordConfirmation('');\n    setErrors(null);\n  };\n\n  const changeField = fieldId => {\n    switch (fieldId) {\n      case 'password':\n        const errors = validate({\n          password: password\n        }, {\n          password: constraints.password\n        });\n\n        if (errors) {\n          setErrors(errors);\n          return;\n        }\n\n        setErrors(null);\n        showField('password-confirmation');\n        return;\n\n      case 'password-confirmation':\n        changePassword();\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  const changePassword = () => {\n    const errors = validate({\n      password,\n      passwordConfirmation: passwordConfirmation\n    }, {\n      password: constraints.password,\n      passwordConfirmation: constraints.passwordConfirmation\n    });\n\n    if (errors) {\n      setErrors(errors);\n      return;\n    }\n\n    setErrors(null);\n    setPerformingAction(true);\n    authentication.changePassword(password).then(() => {\n      openSnackbar('Changed password');\n      hideFields();\n    }).catch(reason => {\n      const code = reason.code;\n      const message = reason.message;\n\n      switch (code) {\n        default:\n          openSnackbar(message);\n          return;\n      }\n    }).finally(() => {\n      setPerformingAction(false);\n    });\n  };\n\n  const handleKeyDown = (event, fieldId) => {\n    if (!event || !fieldId) {\n      return;\n    }\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    const key = event.key;\n\n    if (!key) {\n      return;\n    }\n\n    if (key === 'Escape') {\n      hideFields();\n    } else if (key === 'Enter') {\n      changeField(fieldId);\n    }\n  };\n\n  const deleteAccount = () => {\n    setPerformingAction(true);\n    authentication.deleteAccount().then(() => {\n      openSnackbar('Deleted account');\n    }).catch(reason => {\n      const code = reason.code;\n      const message = reason.message;\n\n      switch (code) {\n        default:\n          openSnackbar(message);\n          return;\n      }\n    }).finally(() => {\n      setPerformingAction(false);\n    });\n  };\n\n  return React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(List, {\n    disablePadding: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(LockIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }))), showingField === 'password' && React.createElement(TextField, {\n    autoComplete: \"new-password\",\n    autoFocus: true,\n    disabled: performingAction,\n    error: !!(errors && errors.password),\n    fullWidth: true,\n    helperText: errors && errors.password ? errors.password[0] : 'Press Enter to change your password',\n    label: \"Password\",\n    required: true,\n    type: \"password\",\n    value: password,\n    variant: \"filled\",\n    onBlur: () => hideFields(),\n    onKeyDown: event => handleKeyDown(event, 'password'),\n    onChange: event => setPassword(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), showingField === 'password-confirmation' && React.createElement(TextField, {\n    autoComplete: \"new-password\",\n    autoFocus: true,\n    disabled: performingAction,\n    error: !!(errors && errors.passwordConfirmation),\n    fullWidth: true,\n    helperText: errors && errors.passwordConfirmation ? errors.passwordConfirmation[0] : 'Press Enter to change your password',\n    label: \"Password confirmation\",\n    required: true,\n    type: \"password\",\n    value: passwordConfirmation,\n    variant: \"filled\",\n    onBlur: hideFields,\n    onKeyDown: event => handleKeyDown(event, 'password-confirmation'),\n    onChange: event => setPasswordConfirmation(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), showingField !== 'password' && showingField !== 'password-confirmation' && React.createElement(React.Fragment, null, React.createElement(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"Password\",\n    secondary: userData.lastPasswordChange ? \"Last changed \".concat(moment(userData.lastPasswordChange.toDate()).format('LL')) : 'Never changed',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  })), React.createElement(Hidden, {\n    smUp: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"Password\",\n    secondary: userData.lastPasswordChange ? \"Last changed \".concat(moment(userData.lastPasswordChange.toDate()).format('ll')) : 'Never changed',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  })), React.createElement(ListItemSecondaryAction, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    title: \"Change\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    disabled: performingAction,\n    onClick: () => showField('password'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(EditIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }))))))), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, React.createElement(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, React.createElement(AccessTimeIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }))), React.createElement(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"Signed in\",\n    secondary: moment(user.metadata.lastSignInTime).format('LLLL'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  })), React.createElement(Hidden, {\n    smUp: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"Signed in\",\n    secondary: moment(user.metadata.lastSignInTime).format('llll'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }))), React.createElement(Box, {\n    mt: 1,\n    mb: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    light: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  })), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(DeleteForeverIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }))), React.createElement(ListItemText, {\n    primary: \"Delete account\",\n    secondary: \"Accounts can\\u2019t be recovered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }), React.createElement(ListItemSecondaryAction, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"secondary\",\n    disabled: performingAction,\n    variant: \"contained\",\n    onClick: onDeleteAccountClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, \"Delete\")))));\n};\n\nSecurityTab.propTypes = {\n  userData: PropTypes.object.isRequired,\n  openSnackbar: PropTypes.func.isRequired,\n  onDeleteAccountClick: PropTypes.func.isRequired\n};\nexport default SecurityTab;","map":{"version":3,"sources":["/home/n3m0/Documents/integrated/client/src/components/Dialog/SettingsDialog/tabs/SecurityTab/SecurityTab.js"],"names":["React","useState","PropTypes","validate","moment","DialogContent","List","ListItem","ListItemIcon","ListItemText","ListItemSecondaryAction","Hidden","TextField","Tooltip","IconButton","Box","Button","LockIcon","EditIcon","AccessTimeIcon","DeleteForeverIcon","Divider","constraints","authentication","SecurityTab","user","userData","openSnackbar","onDeleteAccountClick","showingField","setShowingField","password","setPassword","passwordConfirmation","setPasswordConfirmation","performingAction","setPerformingAction","errors","setErrors","showField","fieldId","hideFields","changeField","changePassword","then","catch","reason","code","message","finally","handleKeyDown","event","altKey","ctrlKey","metaKey","shiftKey","key","deleteAccount","target","value","lastPasswordChange","toDate","format","metadata","lastSignInTime","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport validate from 'validate.js';\nimport moment from 'moment';\n\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport Hidden from '@material-ui/core/Hidden';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nimport LockIcon from '@material-ui/icons/Lock';\nimport EditIcon from '@material-ui/icons/Edit';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Divider from '@material-ui/core/Divider';\n\nimport constraints from '../../../../../utils/constraints';\nimport authentication from '../../../../../utils/authentication';\n\nconst SecurityTab = ({\n  user,\n  userData,\n  openSnackbar,\n  onDeleteAccountClick,\n}) => {\n  const [showingField, setShowingField] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [performingAction, setPerformingAction] = useState(false);\n  const [errors, setErrors] = useState(null);\n\n  const showField = fieldId => {\n    if (!fieldId) {\n      return;\n    }\n    setShowingField(fieldId);\n  };\n\n  const hideFields = () => {\n    setShowingField('');\n    setPassword('');\n    setPasswordConfirmation('');\n    setErrors(null);\n  };\n\n  const changeField = fieldId => {\n    switch (fieldId) {\n      case 'password':\n        const errors = validate(\n          {\n            password: password,\n          },\n          {\n            password: constraints.password,\n          }\n        );\n\n        if (errors) {\n          setErrors(errors);\n          return;\n        }\n        setErrors(null);\n        showField('password-confirmation');\n        return;\n\n      case 'password-confirmation':\n        changePassword();\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  const changePassword = () => {\n    const errors = validate(\n      {\n        password,\n        passwordConfirmation: passwordConfirmation,\n      },\n      {\n        password: constraints.password,\n        passwordConfirmation: constraints.passwordConfirmation,\n      }\n    );\n\n    if (errors) {\n      setErrors(errors);\n\n      return;\n    }\n\n    setErrors(null);\n    setPerformingAction(true);\n    authentication\n      .changePassword(password)\n      .then(() => {\n        openSnackbar('Changed password');\n        hideFields();\n      })\n      .catch(reason => {\n        const {code} = reason;\n        const {message} = reason;\n\n        switch (code) {\n          default:\n            openSnackbar(message);\n            return;\n        }\n      })\n      .finally(() => {\n        setPerformingAction(false);\n      });\n  };\n\n  const handleKeyDown = (event, fieldId) => {\n    if (!event || !fieldId) {\n      return;\n    }\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    const {key} = event;\n\n    if (!key) {\n      return;\n    }\n\n    if (key === 'Escape') {\n      hideFields();\n    } else if (key === 'Enter') {\n      changeField(fieldId);\n    }\n  };\n\n  const deleteAccount = () => {\n    setPerformingAction(true);\n    authentication\n      .deleteAccount()\n      .then(() => {\n        openSnackbar('Deleted account');\n      })\n      .catch(reason => {\n        const {code} = reason;\n        const {message} = reason;\n\n        switch (code) {\n          default:\n            openSnackbar(message);\n            return;\n        }\n      })\n      .finally(() => {\n        setPerformingAction(false);\n      });\n  };\n\n  return (\n    <DialogContent>\n      <List disablePadding>\n        <ListItem>\n          <Hidden xsDown>\n            <ListItemIcon>\n              <LockIcon />\n            </ListItemIcon>\n          </Hidden>\n\n          {showingField === 'password' && (\n            <TextField\n              autoComplete=\"new-password\"\n              autoFocus\n              disabled={performingAction}\n              error={!!(errors && errors.password)}\n              fullWidth\n              helperText={\n                errors && errors.password\n                  ? errors.password[0]\n                  : 'Press Enter to change your password'\n              }\n              label=\"Password\"\n              required\n              type=\"password\"\n              value={password}\n              variant=\"filled\"\n              onBlur={() => hideFields()}\n              onKeyDown={event => handleKeyDown(event, 'password')}\n              onChange={event => setPassword(event.target.value)}\n            />\n          )}\n\n          {showingField === 'password-confirmation' && (\n            <TextField\n              autoComplete=\"new-password\"\n              autoFocus\n              disabled={performingAction}\n              error={!!(errors && errors.passwordConfirmation)}\n              fullWidth\n              helperText={\n                errors && errors.passwordConfirmation\n                  ? errors.passwordConfirmation[0]\n                  : 'Press Enter to change your password'\n              }\n              label=\"Password confirmation\"\n              required\n              type=\"password\"\n              value={passwordConfirmation}\n              variant=\"filled\"\n              onBlur={hideFields}\n              onKeyDown={event => handleKeyDown(event, 'password-confirmation')}\n              onChange={event => setPasswordConfirmation(event.target.value)}\n            />\n          )}\n\n          {showingField !== 'password' &&\n            showingField !== 'password-confirmation' && (\n              <>\n                <Hidden xsDown>\n                  <ListItemText\n                    primary=\"Password\"\n                    secondary={\n                      userData.lastPasswordChange\n                        ? `Last changed ${moment(\n                            userData.lastPasswordChange.toDate()\n                          ).format('LL')}`\n                        : 'Never changed'\n                    }\n                  />\n                </Hidden>\n\n                <Hidden smUp>\n                  <ListItemText\n                    primary=\"Password\"\n                    secondary={\n                      userData.lastPasswordChange\n                        ? `Last changed ${moment(\n                            userData.lastPasswordChange.toDate()\n                          ).format('ll')}`\n                        : 'Never changed'\n                    }\n                  />\n                </Hidden>\n\n                <ListItemSecondaryAction>\n                  <Tooltip title=\"Change\">\n                    <div>\n                      <IconButton\n                        disabled={performingAction}\n                        onClick={() => showField('password')}\n                      >\n                        <EditIcon />\n                      </IconButton>\n                    </div>\n                  </Tooltip>\n                </ListItemSecondaryAction>\n              </>\n            )}\n        </ListItem>\n\n        <ListItem>\n          <Hidden xsDown>\n            <ListItemIcon>\n              <AccessTimeIcon />\n            </ListItemIcon>\n          </Hidden>\n\n          <Hidden xsDown>\n            <ListItemText\n              primary=\"Signed in\"\n              secondary={moment(user.metadata.lastSignInTime).format('LLLL')}\n            />\n          </Hidden>\n\n          <Hidden smUp>\n            <ListItemText\n              primary=\"Signed in\"\n              secondary={moment(user.metadata.lastSignInTime).format('llll')}\n            />\n          </Hidden>\n        </ListItem>\n\n        <Box mt={1} mb={1}>\n          <Divider light />\n        </Box>\n\n        <ListItem>\n          <Hidden xsDown>\n            <ListItemIcon>\n              <DeleteForeverIcon />\n            </ListItemIcon>\n          </Hidden>\n\n          <ListItemText\n            primary=\"Delete account\"\n            secondary=\"Accounts can’t be recovered\"\n          />\n\n          <ListItemSecondaryAction>\n            <Button\n              color=\"secondary\"\n              disabled={performingAction}\n              variant=\"contained\"\n              onClick={onDeleteAccountClick}\n            >\n              Delete\n            </Button>\n          </ListItemSecondaryAction>\n        </ListItem>\n      </List>\n    </DialogContent>\n  );\n};\n\nSecurityTab.propTypes = {\n  userData: PropTypes.object.isRequired,\n  openSnackbar: PropTypes.func.isRequired,\n  onDeleteAccountClick: PropTypes.func.isRequired,\n};\n\nexport default SecurityTab;\n"]},"metadata":{},"sourceType":"module"}