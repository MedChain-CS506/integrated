{"ast":null,"code":"import _slicedToArray from \"/home/n3m0/Documents/integrated/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/n3m0/Documents/integrated/client/src/context/patient/PatientContext.js\";\nimport React, { createContext, useReducer } from 'react';\nimport PatientReducer from './PatientReducer';\nimport { SEARCH_PATIENTS, GET_PATIENT, GET_RECORDS, CLEAR_PATIENTS, SET_LOADING } from '../types';\nexport const PatientContext = createContext();\n\nconst PatientContextProvider = props => {\n  const initialState = {\n    patients: [],\n    patient: {},\n    records: [],\n    loading: false\n  };\n\n  const _useReducer = useReducer(PatientReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  }); // ! THESE FUNCTIONS SHOULD BE WHERE WE FETCH INFORMATION FROM THE BLOCKCHAIN\n\n\n  const searchPatients = async text => {\n    setLoading(); // const response = await ...//! from some url\n\n    dispatch({\n      type: SEARCH_PATIENTS // payload: response...\n\n    });\n  };\n\n  const getPatient = async aadhar => {\n    setLoading(); // const response = await ... //! from some url\n\n    dispatch({\n      type: GET_PATIENT // payload: response ...\n\n    });\n  };\n\n  const getPatientRecords = () => {\n    setLoading(); // const response = await ...\n\n    dispatch({\n      type: GET_RECORDS // payload: response ...\n\n    });\n  };\n\n  const clearPatients = () => dispatch({\n    type: CLEAR_PATIENTS\n  });\n\n  return React.createElement(PatientContext.Provider, {\n    value: (searchPatients, clearPatients, getPatient, getPatientRecords // (patients,\n    //   patient,\n    //   records,\n    //   loading,\n    //   searchPatients,\n    //   clearPatients,\n    //   getPatient,\n    //   getPatientRecords) // ! TO AVOID ESLINT... WILL BE USED WHEN WE GET DATA\n    ),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default PatientContextProvider;","map":{"version":3,"sources":["/home/n3m0/Documents/integrated/client/src/context/patient/PatientContext.js"],"names":["React","createContext","useReducer","PatientReducer","SEARCH_PATIENTS","GET_PATIENT","GET_RECORDS","CLEAR_PATIENTS","SET_LOADING","PatientContext","PatientContextProvider","props","initialState","patients","patient","records","loading","state","dispatch","setLoading","type","searchPatients","text","getPatient","aadhar","getPatientRecords","clearPatients","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACEC,eADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,WALF,QAMO,UANP;AAQA,OAAO,MAAMC,cAAc,GAAGR,aAAa,EAApC;;AAEP,MAAMS,sBAAsB,GAAGC,KAAK,IAAI;AACtC,QAAMC,YAAY,GAAG;AACnBC,IAAAA,QAAQ,EAAE,EADS;AAEnBC,IAAAA,OAAO,EAAE,EAFU;AAGnBC,IAAAA,OAAO,EAAE,EAHU;AAInBC,IAAAA,OAAO,EAAE;AAJU,GAArB;;AADsC,sBAQZd,UAAU,CAACC,cAAD,EAAiBS,YAAjB,CARE;AAAA;AAAA,QAQ/BK,KAR+B;AAAA,QAQxBC,QARwB;;AAUtC,QAAMC,UAAU,GAAG,MAAMD,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAjC,CAVsC,CAYtC;;;AACA,QAAMa,cAAc,GAAG,MAAMC,IAAN,IAAc;AACnCH,IAAAA,UAAU,GADyB,CAGnC;;AAEAD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEhB,eADC,CAEP;;AAFO,KAAD,CAAR;AAID,GATD;;AAWA,QAAMmB,UAAU,GAAG,MAAMC,MAAN,IAAgB;AACjCL,IAAAA,UAAU,GADuB,CAGjC;;AAEAD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEf,WADC,CAEP;;AAFO,KAAD,CAAR;AAID,GATD;;AAWA,QAAMoB,iBAAiB,GAAG,MAAM;AAC9BN,IAAAA,UAAU,GADoB,CAG9B;;AAEAD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd,WADC,CAEP;;AAFO,KAAD,CAAR;AAID,GATD;;AAWA,QAAMoB,aAAa,GAAG,MAAMR,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEb;AAAR,GAAD,CAApC;;AAEA,SACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,GACFc,cAAc,EAAEK,aAAF,EAAiBH,UAAjB,EAA6BE,iBADzC,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATG,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGd,KAAK,CAACgB,QAbT,CADF;AAiBD,CAjED;;AAmEA,eAAejB,sBAAf","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport PatientReducer from './PatientReducer';\nimport {\n  SEARCH_PATIENTS,\n  GET_PATIENT,\n  GET_RECORDS,\n  CLEAR_PATIENTS,\n  SET_LOADING,\n} from '../types';\n\nexport const PatientContext = createContext();\n\nconst PatientContextProvider = props => {\n  const initialState = {\n    patients: [],\n    patient: {},\n    records: [],\n    loading: false,\n  };\n\n  const [state, dispatch] = useReducer(PatientReducer, initialState);\n\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  // ! THESE FUNCTIONS SHOULD BE WHERE WE FETCH INFORMATION FROM THE BLOCKCHAIN\n  const searchPatients = async text => {\n    setLoading();\n\n    // const response = await ...//! from some url\n\n    dispatch({\n      type: SEARCH_PATIENTS,\n      // payload: response...\n    });\n  };\n\n  const getPatient = async aadhar => {\n    setLoading();\n\n    // const response = await ... //! from some url\n\n    dispatch({\n      type: GET_PATIENT,\n      // payload: response ...\n    });\n  };\n\n  const getPatientRecords = () => {\n    setLoading();\n\n    // const response = await ...\n\n    dispatch({\n      type: GET_RECORDS,\n      // payload: response ...\n    });\n  };\n\n  const clearPatients = () => dispatch({ type: CLEAR_PATIENTS });\n\n  return (\n    <PatientContext.Provider\n      value={\n        (searchPatients, clearPatients, getPatient, getPatientRecords)\n        // (patients,\n        //   patient,\n        //   records,\n        //   loading,\n        //   searchPatients,\n        //   clearPatients,\n        //   getPatient,\n        //   getPatientRecords) // ! TO AVOID ESLINT... WILL BE USED WHEN WE GET DATA\n      }\n    >\n      {props.children}\n    </PatientContext.Provider>\n  );\n};\n\nexport default PatientContextProvider;\n"]},"metadata":{},"sourceType":"module"}