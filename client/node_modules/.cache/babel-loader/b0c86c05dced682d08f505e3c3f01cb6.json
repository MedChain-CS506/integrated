{"ast":null,"code":"import _slicedToArray from \"/home/n3m0/Documents/integrated/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/n3m0/Documents/integrated/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/n3m0/Documents/integrated/client/src/components/Dialog/SignInDialog/SignInDialog.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; //* MUI\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport validate from 'validate.js';\nimport constraints from '../../../utils/constraints';\nimport authentication from '../../../utils/authentication';\n\nconst SignInDialog = (_ref) => {\n  let dialogProps = _ref.dialogProps,\n      props = _objectWithoutProperties(_ref, [\"dialogProps\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        performingAction = _useState2[0],\n        setPerformingAction = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        email = _useState4[0],\n        setEmail = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        password = _useState6[0],\n        setPassword = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        errors = _useState8[0],\n        setErrors = _useState8[1]; // TODO: FIX THIS... MAKE THIS THE MODULAR VARIABLE FOR ERROR HANDLING...\n\n\n  const resetPassword = () => {\n    const resetErrors = validate({\n      email\n    }, {\n      email: constraints.email\n    });\n\n    if (resetErrors) {\n      setErrors(resetErrors);\n    } else {\n      setErrors(null);\n      setPerformingAction(true);\n      authentication.resetPassword(email).then(() => {\n        props.openSnackbar(\"Sent password reset e-mail to \".concat(email));\n      }).catch(reason => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/invalid-email':\n          case 'auth/missing-android-pkg-name':\n          case 'auth/missing-continue-uri':\n          case 'auth/missing-ios-bundle-id':\n          case 'auth/invalid-continue-uri':\n          case 'auth/unauthorized-continue-uri':\n          case 'auth/user-not-found':\n            props.openSnackbar(message);\n            return;\n\n          default:\n            props.openSnackbar(message);\n        }\n      }).finally(() => setPerformingAction(false));\n    }\n  };\n\n  const signIn = () => {\n    const signInErrors = validate({\n      email,\n      password\n    }, {\n      email: constraints.email,\n      password: constraints.password\n    });\n\n    if (signInErrors) {\n      setErrors(signInErrors);\n    } else {\n      setPerformingAction(true);\n      setErrors(null);\n      authentication.signIn(email, password).then(value => {\n        dialogProps.onClose();\n        const user = value.user;\n        const email = user.email;\n        props.openSnackbar(\"Signed in as \".concat(email));\n      }).catch(reason => {\n        const code = reason.code;\n        const message = reason.message;\n\n        switch (code) {\n          case 'auth/invalid-email':\n          case 'auth/user-not-found':\n          case 'auth/wrong-password':\n            props.openSnackbar(message);\n            return;\n\n          default:\n            props.openSnackbar(message);\n        }\n      }).finally(() => setPerformingAction(false));\n    }\n  };\n\n  const handleKeyPress = event => {\n    if (!email || !password) return;\n    const key = event.key;\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) return;\n    if (key === 'Enter') signIn();\n  };\n\n  const handleExited = () => {\n    setEmail('');\n    setPassword('');\n    setPerformingAction(false);\n  };\n\n  return React.createElement(Dialog, Object.assign({\n    fullWidth: true,\n    maxWidth: \"sm\"\n  }, dialogProps, {\n    onKeyPress: handleKeyPress,\n    onExited: handleExited,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Sign in to your account\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"email\",\n    disabled: performingAction // error={!!(errors && errors.email)}\n    ,\n    fullWidth: true // helperText={errors && errors.email ? errors.email[0] : ''}\n    ,\n    label: \"E-mail address\",\n    placeholder: \"john@doe.com\",\n    required: true,\n    type: \"email\",\n    value: email,\n    variant: \"outlined\",\n    onChange: e => setEmail(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"current-password\",\n    disabled: performingAction // error={!!(errors && errors.password)}\n    ,\n    fullWidth: true // helperText={\n    //   errors && errors.emailAddress\n    //     ? errors.emailAddress[0]\n    //     : ''\n    // }\n    ,\n    label: \"Password\",\n    placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    required: true,\n    type: \"password\",\n    value: password,\n    variant: \"outlined\",\n    onChange: e => setPassword(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })))))), React.createElement(Hidden, {\n    smUp: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"email\",\n    disabled: performingAction // error={!!(errors && errors.email)}\n    ,\n    fullWidth: true // helperText={errors && errors.email ? errors.email[0] : ''}\n    ,\n    label: \"E-mail address\",\n    placeholder: \"john@doe.com\",\n    required: true,\n    type: \"email\",\n    value: email,\n    variant: \"outlined\",\n    onChange: e => setEmail(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoComplete: \"current-password\",\n    disabled: performingAction // error={!!(errors && errors.password)}\n    ,\n    fullWidth: true // helperText={errors && errors.password ? errors.password[0] : ''}\n    ,\n    label: \"Password\",\n    placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    required: true,\n    type: \"password\",\n    value: password,\n    variant: \"outlined\",\n    onChange: e => setPassword(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: dialogProps.onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    color: \"primary\",\n    disabled: !email || performingAction,\n    variant: \"outlined\",\n    onClick: resetPassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Reset password\"), React.createElement(Button, {\n    color: \"primary\",\n    disabled: !email || !password,\n    variant: \"contained\",\n    onClick: signIn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"Sign in\")));\n};\n\nSignInDialog.propTypes = {\n  dialogProps: PropTypes.object.isRequired,\n  openSnackbar: PropTypes.func.isRequired\n};\nexport default SignInDialog;","map":{"version":3,"sources":["/home/n3m0/Documents/integrated/client/src/components/Dialog/SignInDialog/SignInDialog.js"],"names":["React","useState","PropTypes","Dialog","DialogTitle","DialogContent","DialogActions","Hidden","Grid","Button","TextField","validate","constraints","authentication","SignInDialog","dialogProps","props","performingAction","setPerformingAction","email","setEmail","password","setPassword","errors","setErrors","resetPassword","resetErrors","then","openSnackbar","catch","reason","code","message","finally","signIn","signInErrors","value","onClose","user","handleKeyPress","event","key","altKey","ctrlKey","metaKey","shiftKey","handleExited","e","target","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\n//* MUI\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Hidden from '@material-ui/core/Hidden';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport validate from 'validate.js';\nimport constraints from '../../../utils/constraints';\nimport authentication from '../../../utils/authentication';\n\nconst SignInDialog = ({ dialogProps, ...props }) => {\n  const [performingAction, setPerformingAction] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState(null); // TODO: FIX THIS... MAKE THIS THE MODULAR VARIABLE FOR ERROR HANDLING...\n\n  const resetPassword = () => {\n    const resetErrors = validate(\n      {\n        email,\n      },\n      {\n        email: constraints.email,\n      }\n    );\n\n    if (resetErrors) {\n      setErrors(resetErrors);\n    } else {\n      setErrors(null);\n      setPerformingAction(true);\n      authentication\n        .resetPassword(email)\n        .then(() => {\n          props.openSnackbar(`Sent password reset e-mail to ${email}`);\n        })\n        .catch(reason => {\n          const { code } = reason;\n          const { message } = reason;\n\n          switch (code) {\n            case 'auth/invalid-email':\n            case 'auth/missing-android-pkg-name':\n            case 'auth/missing-continue-uri':\n            case 'auth/missing-ios-bundle-id':\n            case 'auth/invalid-continue-uri':\n            case 'auth/unauthorized-continue-uri':\n            case 'auth/user-not-found':\n              props.openSnackbar(message);\n              return;\n\n            default:\n              props.openSnackbar(message);\n          }\n        })\n        .finally(() => setPerformingAction(false));\n    }\n  };\n\n  const signIn = () => {\n    const signInErrors = validate(\n      {\n        email,\n        password,\n      },\n      {\n        email: constraints.email,\n        password: constraints.password,\n      }\n    );\n\n    if (signInErrors) {\n      setErrors(signInErrors);\n    } else {\n      setPerformingAction(true);\n      setErrors(null);\n      authentication\n        .signIn(email, password)\n        .then(value => {\n          dialogProps.onClose();\n          const { user } = value;\n          const { email } = user;\n          props.openSnackbar(`Signed in as ${email}`);\n        })\n        .catch(reason => {\n          const { code } = reason;\n          const { message } = reason;\n\n          switch (code) {\n            case 'auth/invalid-email':\n            case 'auth/user-not-found':\n            case 'auth/wrong-password':\n              props.openSnackbar(message);\n              return;\n\n            default:\n              props.openSnackbar(message);\n          }\n        })\n        .finally(() => setPerformingAction(false));\n    }\n  };\n\n  const handleKeyPress = event => {\n    if (!email || !password) return;\n    const { key } = event;\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey)\n      return;\n    if (key === 'Enter') signIn();\n  };\n\n  const handleExited = () => {\n    setEmail('');\n    setPassword('');\n    setPerformingAction(false);\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      {...dialogProps}\n      onKeyPress={handleKeyPress}\n      onExited={handleExited}\n    >\n      <DialogTitle>Sign in to your account</DialogTitle>\n\n      <DialogContent>\n        <Hidden xsDown>\n          <Grid container direction=\"row\">\n            <Grid item xs={12}>\n              <Grid container direction=\"column\" spacing={2}>\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"email\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.email)}\n                    fullWidth\n                    // helperText={errors && errors.email ? errors.email[0] : ''}\n                    label=\"E-mail address\"\n                    placeholder=\"john@doe.com\"\n                    required\n                    type=\"email\"\n                    value={email}\n                    variant=\"outlined\"\n                    onChange={e => setEmail(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    autoComplete=\"current-password\"\n                    disabled={performingAction}\n                    // error={!!(errors && errors.password)}\n                    fullWidth\n                    // helperText={\n                    //   errors && errors.emailAddress\n                    //     ? errors.emailAddress[0]\n                    //     : ''\n                    // }\n                    label=\"Password\"\n                    placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                    required\n                    type=\"password\"\n                    value={password}\n                    variant=\"outlined\"\n                    onChange={e => setPassword(e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Hidden>\n\n        <Hidden smUp>\n          <Grid container direction=\"column\" spacing={2}>\n            <Grid item xs>\n              <TextField\n                autoComplete=\"email\"\n                disabled={performingAction}\n                // error={!!(errors && errors.email)}\n                fullWidth\n                // helperText={errors && errors.email ? errors.email[0] : ''}\n                label=\"E-mail address\"\n                placeholder=\"john@doe.com\"\n                required\n                type=\"email\"\n                value={email}\n                variant=\"outlined\"\n                onChange={e => setEmail(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs>\n              <TextField\n                autoComplete=\"current-password\"\n                disabled={performingAction}\n                // error={!!(errors && errors.password)}\n                fullWidth\n                // helperText={errors && errors.password ? errors.password[0] : ''}\n                label=\"Password\"\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\n                required\n                type=\"password\"\n                value={password}\n                variant=\"outlined\"\n                onChange={e => setPassword(e.target.value)}\n              />\n            </Grid>\n          </Grid>\n        </Hidden>\n      </DialogContent>\n\n      <DialogActions>\n        <Button color=\"primary\" onClick={dialogProps.onClose}>\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          disabled={!email || performingAction}\n          variant=\"outlined\"\n          onClick={resetPassword}\n        >\n          Reset password\n        </Button>\n        <Button\n          color=\"primary\"\n          disabled={!email || !password}\n          variant=\"contained\"\n          onClick={signIn}\n        >\n          Sign in\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nSignInDialog.propTypes = {\n  dialogProps: PropTypes.object.isRequired,\n  openSnackbar: PropTypes.func.isRequired,\n};\n\nexport default SignInDialog;\n"]},"metadata":{},"sourceType":"module"}